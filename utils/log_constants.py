# Formato da mensagem dos logs
LOG_FORMATTER = "[ %(asctime)s ] - %(message)s"

# Formato da data/hora nos logs
LOG_DATE_FORMAT = "%d-%m-%Y %H:%M:%S"

# Constantes de a√ß√£o para registro de logs CRUD
LOG_INSERT = "INSERT"
LOG_LIST = "LIST"
LOG_DELETE = "DELETE"
LOG_SEARCH = "SEARCH"
LOG_PAYROLL = "PAYROLL"
LOG_EXPORT = "EXPORT"
LOG_IMPORT_JSON = "IMPORT_JSON"
LOG_IMPORT_CSV = "IMPORT_CSV"

# Constantes de a√ß√£o para registro de logs Eventos sistema
LOG_STARTUP = "STARTUP"
LOG_SHUTDOWN = "SHUTDOWN"
LOG_LOCALE = "LOCALE"
LOG_LOAD = "LOAD"
LOG_CREATE_JSON = "CREATE_JSON"
LOG_CREATE_CSV = "CREATE_CSV"
LOG_UNKNOWN = "UNKNOWN"

# Mensagens de log em portugu√™s
LOG_MESSAGES_PT = {
    "INSERT": {
        "start": "üü° Iniciando processo de inclus√£o.",
        "success": "‚úÖ Funcion√°rio inclu√≠do com sucesso.",
        "error": "‚ùå Erro ao incluir funcion√°rio.",
        "empty": "üì≠ Nenhum dado para incluir.",
        "detail": lambda name, registration: f"‚úÖ Funcion√°rio '{name}' inclu√≠do com matr√≠cula {registration}.",
    },
    "LIST": {
        "start": "üü° Iniciando listagem.",
        "success": "üìã Lista exibida com sucesso.",
        "error": "‚ùå Erro ao listar dados.",
        "empty": "üì≠ Nenhum item encontrado.",
    },
    "DELETE": {
        "start": "üü° Iniciando exclus√£o.",
        "success": "üóëÔ∏è Exclus√£o realizada com sucesso.",
        "error": "‚ùå Erro ao excluir item.",
        "detail": lambda name, registration: f"üóëÔ∏è Funcion√°rio '{name}' com matr√≠cula {registration} foi exclu√≠do.",
    },
    "SEARCH": {
        "start": "üü° Iniciando consulta.",
        "success": "üîç Consulta conclu√≠da.",
        "error": "‚ùå Erro na consulta.",
        "empty": "üì≠ Nenhum resultado encontrado.",
        "detail": lambda term: f"üîé Consulta realizada com o termo '{term}'.",
    },
    "PAYROLL": {
        "start": "üü° Gerando folha de pagamento.",
        "success": "üí∞ Folha gerada com sucesso.",
        "error": "‚ùå Erro ao gerar folha.",
    },
    "EXPORT": {
        "start": "üü° Exportando dados.",
        "success": "üì§ Exporta√ß√£o conclu√≠da.",
        "error": "‚ùå Erro na exporta√ß√£o.",
    },
    "IMPORT_JSON": {
        "start": "üü° Importando JSON.",
        "success": "üì• JSON importado com sucesso.",
        "error": "‚ùå Erro ao importar JSON.",
    },
    "IMPORT_CSV": {
        "start": "üü° Importando CSV.",
        "success": "üì• CSV importado com sucesso.",
        "error": "‚ùå Erro ao importar CSV.",
    },
    "STARTUP": {
        "start": "üöÄ Sistema inicializado.",
    },
    "SHUTDOWN": {
        "start": "üõë Sistema encerrado.",
    },
    "LOCALE": {
        "start": "üåê Configurando locale.",
        "success": "üåê Locale configurado com sucesso.",
        "error": "‚ùå Erro ao configurar locale.",
    },
    "LOAD": {
        "start": "üü° Carregando dados.",
        "success": "üìÇ Dados carregados.",
        "error": "‚ùå Erro ao carregar dados.",
    },
    "CREATE_JSON": {
        "start": "üü° Criando JSON.",
        "success": "üìù JSON criado.",
        "error": "‚ùå Erro ao criar JSON.",
    },
    "CREATE_CSV": {
        "start": "üü° Criando CSV.",
        "success": "üìù CSV criado.",
        "error": "‚ùå Erro ao criar CSV.",
    },
    "UNKNOWN": {
        "start": "üü° A√ß√£o desconhecida iniciada.",
        "success": "‚úÖ A√ß√£o conclu√≠da.",
        "error": "‚ùå Erro em a√ß√£o desconhecida.",
        "warning": "‚ö†Ô∏è A√ß√£o executada com ressalvas.",
    },
}


def get_log_message(code: str, status: str, **kwargs) -> str:
    """
    Retorna uma mensagem de log amig√°vel em portugu√™s.

    Args:
        code (str): C√≥digo da a√ß√£o de log.
        status (str): Tipo de evento (start, success, error).
        **kwargs: Par√¢metros opcionais para mensagens din√¢micas.

    Returns:
        str: Mensagem formatada para exibi√ß√£o.
    """
    block = LOG_MESSAGES_PT.get(code, LOG_MESSAGES_PT["UNKNOWN"])
    message = block.get(status)

    # Executa fun√ß√£o lambda se necess√°rio
    if callable(message):
        result = message(**kwargs)
        return str(result) if result is not None else "‚ÑπÔ∏è A√ß√£o registrada."

    # Retorna mensagem est√°tica
    return str(message) if message is not None else "‚ÑπÔ∏è A√ß√£o registrada."
